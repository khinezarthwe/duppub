unique,"Aho, Alfred V and Corasick, Margaret J",Efficient string matching: an aid to bibliographic search,1975,"This paper describes a simple, efficient algorithm to locate all occurrences of any of a finite number of keywords in a string of text. The algorithm consists of constructing a finite state pattern matching machine from the keywords and then using the pattern matching machine to process the text string in a single pass. Construction of the pattern matching machine takes time proportional to the sum of the lengths of the keywords. The number of state transitions made by the pattern matching machine in processing the text string is independent of the number of keywords. The algorithm has been used to improve the speed of a library bibliographic search program by a factor of 5 to 10.",https://dl.acm.org/citation.cfm?id=360855
cross-publisher-1,"Hall, Patrick AV and Dowling, Geoff R",Approximate string matching,1980,"Approximate matching of strings is reviewed with the aim of surveying techniques suitable for finding an item in a database when there may be a spelling mistake or other error in the keyword. The methods found are classified as either equivalence or similarity problems. Equivalence problems are seen to be readily solved using canonical forms. For sinuiarity problems difference measures are surveyed, with a full description of the wellestablmhed dynamic programming method relating this to the approach using probabilities and likelihoods. Searches for approximate matches in large sets using a difference function are seen to be an open problem still, though several promising ideas have been suggested. Approximate matching (error correction) during parsing is briefly reviewed.",https://dl.acm.org/citation.cfm?id=356830
cross-publisher-2,Patrick A. V. Hall and Geoff R. Dowling,Approximate string matching,1980,"Approximate matching of strings is reviewed with the aim of surveying techniques suitable for finding an item in a database when there may be a spelling mistake or other error in the keyword. The methods found are classified as either equivalence or similarity problems. Equivalence problems are seen to be readily solved using canonical forms. For sinuiarity problems difference measures are surveyed, with a full description of the well-establmhed dynamic programming method relating this to the approach using probabilities and likelihoods. Searches for approximate matches in large sets using a difference function are seen to be an open problem still, though several promising ideas have been suggested. Approximate matching (error correction) during parsing is briefly reviewed.",http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.457.2016
cross-publisher-3,"PAV HALL, GR DOWLING",Approximate string matching,1994,"Approximate matching of strings is reviewed with the aim of surveying techniques suitable for finding an item in a database when there may be a spelling mistake or other error in the keyword. The methods found are classified as either equivalence or similarity problems. Equivalence problems are seen to be readily solved using canonical forms. For sinuiarity problems difference measures are surveyed, with a full description of the well-establmhed dynamic programming method relating this to the approach using probabilities and likelihoods. Searches for approximate matches in large sets using a difference function are seen to be an open problem still, though several promising ideas have been suggested. Approximate matching (error correction) during parsing is briefly reviewed.",Computer Algorithms: String Pattern Matching Strategies
arXiv-v1,"Aleksander Cisłak, Szymon Grabowski",A practical index for approximate dictionary matching with few mismatches,2015,"Approximate dictionary matching is a classic string matching problem, with applications in, e.g., online catalogs, geolocation (mapping possibly misspelled location description to geocoordinates), web searchers, etc. We present a surprisingly simple solution, based on the Dirichlet principle, for matching with a keyword with few mismatches and experimentally show that it offers competitive space-time tradeoffs. Our implementation in the C++ language is focused mostly on data compaction, which is beneficial for the search speed (e.g., by being cache friendly). We compare our solution with other algorithms and we show that it performs better for the Hamming distance. Query times in the order of 1-2 microseconds were reported for one mismatch for the dictionary size of a few megabytes on a medium-end PC. We also demonstrate that a basic compression technique consisting in character substitution can significantly reduce the index size for the DNA data (below the dictionary size), while still keeping the query time relatively low.",https://arxiv.org/abs/1501.04948v1
arXiv-v2,"Aleksander Cisłak, Szymon Grabowski",A practical index for approximate dictionary matching with few mismatches,2015,"Approximate dictionary matching is a classic string matching problem, with applications in, e.g., online catalogs, geolocation (mapping possibly misspelled location description to geocoordinates), web searchers, etc. We present a surprisingly simple solution, based on the Dirichlet principle, for matching a keyword with few mismatches and experimentally show that it offers competitive space-time tradeoffs. Our implementation in the C++ language is focused mostly on data compaction, which is beneficial for the search speed (e.g., by being cache friendly). We compare our solution with other algorithms and we show that it performs better for the Hamming distance. Query times in the order of 1--2 microseconds were reported for one mismatch for the dictionary size of a few megabytes on a medium-end PC. We also demonstrate that a basic compression technique consisting in character substitution can significantly reduce the index size for the DNA data (below the dictionary size), while still keeping the query time relatively low.",https://arxiv.org/abs/1501.04948v2
arXiv-v3,"Aleksander Cisłak, Szymon Grabowski",A practical index for approximate dictionary matching with few mismatches,2015,"Approximate dictionary matching is a classic string matching problem (checking if a query string occurs in a collection of strings) with applications in, e.g., spellchecking, online catalogs, geolocation, and web searchers. We present a surprisingly simple solution called a split index, which is based on the Dirichlet principle, for matching a keyword with few mismatches, and experimentally show that it offers competitive space-time tradeoffs. Our implementation in the C++ language is focused mostly on data compaction, which is beneficial for the search speed (e.g., by being cache friendly). We compare our solution with other algorithms and we show that it performs better for the Hamming distance. Query times in the order of 1 microsecond were reported for one mismatch for the dictionary size of a few megabytes on a medium-end PC. We also demonstrate that a basic compression technique consisting in q-gram substitution can significantly reduce the index size (up to 50% of the input text size for the DNA), while still keeping the query time relatively low.",https://arxiv.org/abs/1501.04948v3
arXiv-v4,"Aleksander Cisłak, Szymon Grabowski",A practical index for approximate dictionary matching with few mismatches,2016,"Approximate dictionary matching is a classic string matching problem (checking if a query string occurs in a collection of strings) with applications in, e.g., spellchecking, online catalogs, geolocation, and web searchers. We present a surprisingly simple solution called a split index, which is based on the Dirichlet principle, for matching a keyword with few mismatches, and experimentally show that it offers competitive space-time tradeoffs. Our implementation in the C++ language is focused mostly on data compaction, which is beneficial for the search speed (e.g., by being cache friendly). We compare our solution with other algorithms and we show that it performs better for the Hamming distance. Query times in the order of 1 microsecond were reported for one mismatch for the dictionary size of a few megabytes on a medium-end PC. We also demonstrate that a basic compression technique consisting in q-gram substitution can significantly reduce the index size (up to 50% of the input text size for the DNA), while still keeping the query time relatively low.",https://arxiv.org/abs/1501.04948v4
